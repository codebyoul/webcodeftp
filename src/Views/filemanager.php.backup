<!DOCTYPE html>
<html lang="<?= htmlspecialchars($language ?? 'en', ENT_QUOTES, 'UTF-8') ?>" class="<?= htmlspecialchars($theme ?? 'dark', ENT_QUOTES, 'UTF-8') ?>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title><?= htmlspecialchars($app_name ?? 'WebFTP', ENT_QUOTES, 'UTF-8') ?> - File Manager</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    <link rel="alternate icon" type="image/x-icon" href="/favicon.ico">

    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#eff6ff',
                            100: '#dbeafe',
                            200: '#bfdbfe',
                            300: '#93c5fd',
                            400: '#60a5fa',
                            500: '#3b82f6',
                            600: '#2563eb',
                            700: '#1d4ed8',
                            800: '#1e40af',
                            900: '#1e3a8a',
                        }
                    }
                }
            }
        }
    </script>

    <!-- CodeMirror 6 Editor (ESM Modules via CDN) -->
    <script type="module">
        // Import CodeMirror 6 core - using ?deps to pin shared dependencies
        // This ensures all packages share the SAME @codemirror/state instance
        import { EditorView, basicSetup, minimalSetup } from 'https://esm.sh/codemirror@6.0.1?deps=@codemirror/state@6.4.0';
        import { EditorState, Compartment } from 'https://esm.sh/@codemirror/state@6.4.0';
        import { oneDark } from 'https://esm.sh/@codemirror/theme-one-dark@6.1.2?deps=@codemirror/state@6.4.0';

        // Import essential features
        import { lineNumbers, highlightActiveLineGutter, highlightSpecialChars, drawSelection, dropCursor, rectangularSelection, crosshairCursor, highlightActiveLine } from 'https://esm.sh/@codemirror/view@6.23.0?deps=@codemirror/state@6.4.0';
        import { foldGutter, indentOnInput, syntaxHighlighting, defaultHighlightStyle, bracketMatching, foldKeymap } from 'https://esm.sh/@codemirror/language@6.10.0?deps=@codemirror/state@6.4.0';
        import { history, defaultKeymap, historyKeymap } from 'https://esm.sh/@codemirror/commands@6.3.3?deps=@codemirror/state@6.4.0';
        import { highlightSelectionMatches, searchKeymap } from 'https://esm.sh/@codemirror/search@6.5.5?deps=@codemirror/state@6.4.0';
        import { closeBrackets, autocompletion, closeBracketsKeymap, completionKeymap } from 'https://esm.sh/@codemirror/autocomplete@6.11.1?deps=@codemirror/state@6.4.0';
        import { linter, lintGutter, lintKeymap } from 'https://esm.sh/@codemirror/lint@6.5.0?deps=@codemirror/state@6.4.0';
        import { syntaxTree } from 'https://esm.sh/@codemirror/language@6.10.0?deps=@codemirror/state@6.4.0';
        import { keymap } from 'https://esm.sh/@codemirror/view@6.23.0?deps=@codemirror/state@6.4.0';

        // Import ALL available language support with pinned dependencies
        import { javascript } from 'https://esm.sh/@codemirror/lang-javascript@6.2.1?deps=@codemirror/state@6.4.0';
        import { python } from 'https://esm.sh/@codemirror/lang-python@6.1.4?deps=@codemirror/state@6.4.0';
        import { php } from 'https://esm.sh/@codemirror/lang-php@6.0.1?deps=@codemirror/state@6.4.0';
        import { html } from 'https://esm.sh/@codemirror/lang-html@6.4.7?deps=@codemirror/state@6.4.0';
        import { css } from 'https://esm.sh/@codemirror/lang-css@6.2.1?deps=@codemirror/state@6.4.0';
        import { json } from 'https://esm.sh/@codemirror/lang-json@6.0.1?deps=@codemirror/state@6.4.0';
        import { xml } from 'https://esm.sh/@codemirror/lang-xml@6.0.2?deps=@codemirror/state@6.4.0';
        import { sql } from 'https://esm.sh/@codemirror/lang-sql@6.6.1?deps=@codemirror/state@6.4.0';
        import { markdown } from 'https://esm.sh/@codemirror/lang-markdown@6.2.4?deps=@codemirror/state@6.4.0';
        import { java } from 'https://esm.sh/@codemirror/lang-java@6.0.1?deps=@codemirror/state@6.4.0';
        import { cpp } from 'https://esm.sh/@codemirror/lang-cpp@6.0.2?deps=@codemirror/state@6.4.0';
        import { rust } from 'https://esm.sh/@codemirror/lang-rust@6.0.1?deps=@codemirror/state@6.4.0';
        import { go } from 'https://esm.sh/@codemirror/lang-go@6.0.0?deps=@codemirror/state@6.4.0';
        import { lezer } from 'https://esm.sh/@codemirror/lang-lezer@6.0.1?deps=@codemirror/state@6.4.0';
        import { sass } from 'https://esm.sh/@codemirror/lang-sass@6.0.2?deps=@codemirror/state@6.4.0';
        import { less } from 'https://esm.sh/@codemirror/lang-less@6.0.2?deps=@codemirror/state@6.4.0';
        import { yaml } from 'https://esm.sh/@codemirror/lang-yaml@6.0.0?deps=@codemirror/state@6.4.0';
        import { wast } from 'https://esm.sh/@codemirror/lang-wast@6.0.2?deps=@codemirror/state@6.4.0';

        // Global editor instance
        let editorView = null;
        let currentFilePath = null;
        let originalContent = null;
        let isModified = false;

        // ============================================================
        // LINTING IMPLEMENTATION
        // Professional code linting based on CodeMirror examples
        // ============================================================

        // JSON Linter - validates JSON syntax
        const jsonLinter = linter(view => {
            const diagnostics = [];
            const content = view.state.doc.toString();

            try {
                JSON.parse(content);
            } catch (e) {
                // Try to find the position of the error
                let pos = 0;
                const match = e.message.match(/position (\d+)/);
                if (match) {
                    pos = parseInt(match[1]);
                } else {
                    // If no position, highlight the first character
                    pos = 0;
                }

                diagnostics.push({
                    from: Math.min(pos, content.length),
                    to: Math.min(pos + 1, content.length),
                    severity: 'error',
                    message: `JSON Error: ${e.message}`
                });
            }

            return diagnostics;
        });

        // JavaScript/TypeScript Linter - basic syntax and common issues
        const javascriptLinter = linter(view => {
            const diagnostics = [];

            // Check for common issues using syntax tree
            syntaxTree(view.state).cursor().iterate(node => {
                const text = view.state.sliceDoc(node.from, node.to);

                // Warn about console statements
                if (node.name === 'CallExpression') {
                    const callText = view.state.sliceDoc(node.from, node.to);
                    if (callText.startsWith('console.')) {
                        diagnostics.push({
                            from: node.from,
                            to: node.to,
                            severity: 'warning',
                            message: 'Console statement detected - consider removing in production',
                            actions: [{
                                name: 'Remove',
                                apply(view, from, to) {
                                    // Remove the entire line
                                    const line = view.state.doc.lineAt(from);
                                    view.dispatch({
                                        changes: { from: line.from, to: line.to }
                                    });
                                }
                            }]
                        });
                    }
                }

                // Warn about debugger statements
                if (node.name === 'DebuggerStatement') {
                    diagnostics.push({
                        from: node.from,
                        to: node.to,
                        severity: 'warning',
                        message: 'Debugger statement - should be removed before deployment',
                        actions: [{
                            name: 'Remove',
                            apply(view, from, to) {
                                view.dispatch({ changes: { from, to } });
                            }
                        }]
                    });
                }

                // Check for var usage (suggest let/const)
                if (node.name === 'VariableDeclaration') {
                    const declText = view.state.sliceDoc(node.from, node.from + 3);
                    if (declText === 'var') {
                        diagnostics.push({
                            from: node.from,
                            to: node.from + 3,
                            severity: 'info',
                            message: 'Consider using let or const instead of var'
                        });
                    }
                }
            });

            return diagnostics;
        });

        // PHP Linter - basic PHP syntax checks
        const phpLinter = linter(view => {
            const diagnostics = [];
            const content = view.state.doc.toString();

            // Check for common PHP issues
            const lines = content.split('\n');
            lines.forEach((line, index) => {
                const linePos = view.state.doc.line(index + 1);

                // Check for short tags (discouraged)
                if (line.includes('<?') && !line.includes('<?php')) {
                    const match = line.indexOf('<?');
                    if (match !== -1) {
                        diagnostics.push({
                            from: linePos.from + match,
                            to: linePos.from + match + 2,
                            severity: 'warning',
                            message: 'Short PHP tags are discouraged - use <?php instead'
                        });
                    }
                }

                // Check for deprecated functions
                const deprecatedFunctions = ['mysql_connect', 'mysql_query', 'ereg', 'split'];
                deprecatedFunctions.forEach(func => {
                    if (line.includes(func)) {
                        const match = line.indexOf(func);
                        if (match !== -1) {
                            diagnostics.push({
                                from: linePos.from + match,
                                to: linePos.from + match + func.length,
                                severity: 'error',
                                message: func + ' is deprecated - use modern alternatives'
                            });
                        }
                    }
                });
            });

            return diagnostics;
        });

        // CSS Linter - basic CSS validation
        const cssLinter = linter(view => {
            const diagnostics = [];
            const content = view.state.doc.toString();

            // Check for unbalanced braces
            const openBraces = (content.match(/{/g) || []).length;
            const closeBraces = (content.match(/}/g) || []).length;

            if (openBraces !== closeBraces) {
                diagnostics.push({
                    from: 0,
                    to: 1,
                    severity: 'error',
                    message: `Unbalanced braces: ${openBraces} opening, ${closeBraces} closing`
                });
            }

            // Check for !important usage
            const lines = content.split('\n');
            lines.forEach((line, index) => {
                if (line.includes('!important')) {
                    const linePos = view.state.doc.line(index + 1);
                    const match = line.indexOf('!important');
                    if (match !== -1) {
                        diagnostics.push({
                            from: linePos.from + match,
                            to: linePos.from + match + 10,
                            severity: 'warning',
                            message: 'Avoid using !important - consider restructuring your CSS'
                        });
                    }
                }
            });

            return diagnostics;
        });

        // Get appropriate linter for file extension
        function getLinterForExtension(extension) {
            if (!extension) return null;

            const ext = extension.toLowerCase();

            // JSON files
            if (['json', 'jsonc', 'json5'].includes(ext)) {
                return jsonLinter;
            }

            // JavaScript/TypeScript files
            if (['js', 'jsx', 'ts', 'tsx', 'mjs', 'cjs'].includes(ext)) {
                return javascriptLinter;
            }

            // PHP files
            if (['php', 'phtml', 'php3', 'php4', 'php5', 'php7', 'php8', 'phps'].includes(ext)) {
                return phpLinter;
            }

            // CSS files
            if (['css', 'scss', 'sass', 'less'].includes(ext)) {
                return cssLinter;
            }

            // No linter for this file type
            return null;
        }

        // ============================================================
        // ADVANCED AUTOCOMPLETION
        // Context-aware completions based on CodeMirror examples
        // ============================================================

        // Custom completion source for common snippets
        function customCompletions(context) {
            const word = context.matchBefore(/\w*/);
            if (word.from == word.to && !context.explicit) {
                return null;
            }

            // Get file extension from current file path
            const extension = currentFilePath ? currentFilePath.split('.').pop().toLowerCase() : '';

            let completions = [];

            // PHP completions
            if (['php', 'phtml'].includes(extension)) {
                completions = [
                    { label: 'function', type: 'keyword', apply: 'function ${1:name}(${2:params}) {\n\t${3}\n}', detail: 'function declaration' },
                    { label: 'class', type: 'keyword', apply: 'class ${1:Name} {\n\t${2}\n}', detail: 'class declaration' },
                    { label: 'if', type: 'keyword', apply: 'if (${1:condition}) {\n\t${2}\n}', detail: 'if statement' },
                    { label: 'foreach', type: 'keyword', apply: 'foreach (${1:array} as ${2:value}) {\n\t${3}\n}', detail: 'foreach loop' },
                    { label: 'public', type: 'keyword' },
                    { label: 'private', type: 'keyword' },
                    { label: 'protected', type: 'keyword' },
                    { label: 'static', type: 'keyword' },
                    { label: 'namespace', type: 'keyword' },
                    { label: 'use', type: 'keyword' },
                    { label: 'echo', type: 'function', info: 'Output text' },
                    { label: 'var_dump', type: 'function', info: 'Dump variable information' },
                    { label: 'isset', type: 'function', info: 'Check if variable is set' },
                    { label: 'empty', type: 'function', info: 'Check if variable is empty' },
                ];
            }

            // JavaScript completions
            if (['js', 'jsx', 'ts', 'tsx'].includes(extension)) {
                completions = [
                    { label: 'function', type: 'keyword', apply: 'function ${1:name}(${2:params}) {\n\t${3}\n}', detail: 'function declaration' },
                    { label: 'const', type: 'keyword', apply: 'const ${1:name} = ${2:value};', detail: 'const declaration' },
                    { label: 'let', type: 'keyword', apply: 'let ${1:name} = ${2:value};', detail: 'let declaration' },
                    { label: 'if', type: 'keyword', apply: 'if (${1:condition}) {\n\t${2}\n}', detail: 'if statement' },
                    { label: 'for', type: 'keyword', apply: 'for (let i = 0; i < ${1:length}; i++) {\n\t${2}\n}', detail: 'for loop' },
                    { label: 'forEach', type: 'method', apply: 'forEach(${1:item} => {\n\t${2}\n})', detail: 'forEach method' },
                    { label: 'map', type: 'method', info: 'Array.map()' },
                    { label: 'filter', type: 'method', info: 'Array.filter()' },
                    { label: 'reduce', type: 'method', info: 'Array.reduce()' },
                    { label: 'console.log', type: 'function', info: 'Log to console' },
                    { label: 'async', type: 'keyword' },
                    { label: 'await', type: 'keyword' },
                    { label: 'Promise', type: 'class' },
                ];
            }

            // CSS completions
            if (['css', 'scss', 'sass'].includes(extension)) {
                completions = [
                    { label: 'display', type: 'property', info: 'Display property' },
                    { label: 'position', type: 'property', info: 'Position property' },
                    { label: 'flex', type: 'property', info: 'Flexbox property' },
                    { label: 'grid', type: 'property', info: 'Grid property' },
                    { label: 'margin', type: 'property', info: 'Margin property' },
                    { label: 'padding', type: 'property', info: 'Padding property' },
                    { label: 'color', type: 'property', info: 'Text color' },
                    { label: 'background', type: 'property', info: 'Background property' },
                    { label: 'font-size', type: 'property', info: 'Font size' },
                    { label: 'font-weight', type: 'property', info: 'Font weight' },
                ];
            }

            return {
                from: word.from,
                options: completions,
                validFor: /^\w*$/
            };
        }

        // Language mode mapping - supports ALL major programming languages and frameworks
        const languageModes = {
            // JavaScript / TypeScript / Node.js
            'js': () => javascript({ jsx: false }),
            'mjs': () => javascript({ jsx: false }),
            'cjs': () => javascript({ jsx: false }),
            'jsx': () => javascript({ jsx: true }),
            'ts': () => javascript({ typescript: true }),
            'tsx': () => javascript({ jsx: true, typescript: true }),
            'vue': () => javascript({ jsx: true }),
            'svelte': () => javascript({ jsx: true }),

            // Python
            'py': () => python(),
            'pyw': () => python(),
            'pyi': () => python(),
            'pyx': () => python(),
            'wsgi': () => python(),

            // PHP (Laravel, Symfony, etc.)
            'php': () => php(),
            'phtml': () => php(),
            'php3': () => php(),
            'php4': () => php(),
            'php5': () => php(),
            'php7': () => php(),
            'php8': () => php(),
            'phps': () => php(),

            // HTML / Templates
            'html': () => html(),
            'htm': () => html(),
            'xhtml': () => html(),
            'shtml': () => html(),
            'blade': () => html(),      // Laravel Blade templates
            'twig': () => html(),       // Symfony Twig templates
            'jinja': () => html(),      // Python Jinja templates
            'jinja2': () => html(),     // Python Jinja2 templates
            'ejs': () => html(),        // Express.js templates
            'hbs': () => html(),        // Handlebars templates
            'mustache': () => html(),   // Mustache templates

            // CSS / Preprocessors
            'css': () => css(),
            'scss': () => sass(),
            'sass': () => sass(),
            'less': () => less(),
            'styl': () => css(),
            'stylus': () => css(),

            // Data / Config files
            'json': () => json(),
            'jsonc': () => json(),
            'json5': () => json(),
            'xml': () => xml(),
            'yml': () => yaml(),
            'yaml': () => yaml(),
            'toml': () => json(),
            'ini': () => json(),
            'conf': () => json(),
            'config': () => json(),
            'env': () => json(),
            'properties': () => json(),

            // Database
            'sql': () => sql(),
            'mysql': () => sql(),
            'pgsql': () => sql(),
            'sqlite': () => sql(),
            'psql': () => sql(),

            // Markdown / Documentation
            'md': () => markdown(),
            'markdown': () => markdown(),
            'mdown': () => markdown(),
            'mkd': () => markdown(),
            'mdx': () => markdown(),
            'rst': () => markdown(),

            // Java
            'java': () => java(),
            'jar': () => java(),

            // C / C++
            'c': () => cpp(),
            'cpp': () => cpp(),
            'cc': () => cpp(),
            'cxx': () => cpp(),
            'h': () => cpp(),
            'hpp': () => cpp(),
            'hh': () => cpp(),
            'hxx': () => cpp(),

            // Rust
            'rs': () => rust(),

            // Go
            'go': () => go(),

            // WebAssembly
            'wast': () => wast(),
            'wat': () => wast(),

            // Shell scripts (no specific highlighter, using plain text)
            'sh': () => [],
            'bash': () => [],
            'zsh': () => [],
            'fish': () => [],
            'ksh': () => [],

            // Other common text files (no syntax highlighting, but editable)
            'txt': () => [],
            'log': () => [],
            'gitignore': () => [],
            'dockerignore': () => [],
            'htaccess': () => [],
            'lock': () => [],
            'csv': () => [],
            'tsv': () => [],
            'editorconfig': () => [],
            'npmrc': () => [],
            'eslintrc': () => [],
            'prettierrc': () => [],

            // DEFAULT FALLBACK: Any unknown file extension will open in plain text editor
            // Returning [] means no syntax highlighting, but file is still fully editable
            // This allows WebFTP to be truly generic and work with ANY text file
        };

        // Get language extension for file
        function getLanguageExtension(extension) {
            if (!extension) {
                console.log('No extension provided, using plain text editor');
                return [];
            }

            const mode = languageModes[extension.toLowerCase()];

            // If mode exists and is a function, call it
            if (mode && typeof mode === 'function') {
                try {
                    const result = mode();
                    console.log(`Loaded syntax highlighting for .${extension}`);
                    return result;
                } catch (error) {
                    console.warn('Error loading language mode for', extension, error);
                    console.log(`Falling back to plain text editor for .${extension}`);
                    return [];
                }
            }

            // No language mode found, use plain text editor (default fallback)
            console.log(`No syntax highlighting for .${extension}, using plain text editor`);
            return [];
        }

        // Initialize CodeMirror editor with professional configuration
        // Based on official CodeMirror 6 examples and best practices
        function initializeEditor(content, extension, isReadOnly = false) {
            const container = document.getElementById('editorContainer');

            // Destroy existing editor if any
            if (editorView) {
                editorView.destroy();
                editorView = null;
            }

            // Get current theme
            const isDarkMode = document.documentElement.classList.contains('dark');

            // Get language support
            const languageExtension = getLanguageExtension(extension);

            console.log('Initializing editor for', extension, '- Language support:', languageExtension ? 'Yes' : 'Plain text');

            // Build professional extension set based on CodeMirror examples
            // Using individual extensions instead of basicSetup for more control
            const extensions = [
                // Essential editing features
                lineNumbers(),
                highlightActiveLineGutter(),
                highlightSpecialChars(),
                history(),
                foldGutter(),
                drawSelection(),
                dropCursor(),
                EditorState.allowMultipleSelections.of(true),
                indentOnInput(),
                syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
                bracketMatching(),
                closeBrackets(),
                autocompletion({
                    override: [customCompletions]
                }),
                rectangularSelection(),
                crosshairCursor(),
                highlightActiveLine(),
                highlightSelectionMatches(),

                // Linting support - Add visual gutter for errors/warnings
                lintGutter(),

                // Keymaps - Order matters: more specific keymaps first
                keymap.of([
                    ...closeBracketsKeymap,
                    ...defaultKeymap,
                    ...searchKeymap,
                    ...historyKeymap,
                    ...foldKeymap,
                    ...completionKeymap,
                    ...lintKeymap,
                ]),

                // Editable state
                EditorView.editable.of(!isReadOnly),

                // Document change listener
                EditorView.updateListener.of((update) => {
                    if (update.docChanged && !isReadOnly) {
                        if (!isModified) {
                            isModified = true;
                            document.getElementById('editorModifiedStatus').classList.remove('hidden');
                        }
                    }
                }),

                // Professional editor styling
                EditorView.theme({
                    "&": {
                        height: "100%",
                        fontSize: "14px",
                        fontFamily: "'Consolas', 'Monaco', 'Courier New', monospace"
                    },
                    ".cm-scroller": {
                        overflow: "auto",
                        fontFamily: "'Consolas', 'Monaco', 'Courier New', monospace"
                    },
                    ".cm-content": {
                        paddingTop: "8px",
                        paddingBottom: "8px",
                        caretColor: "#528bff"
                    },
                    ".cm-line": {
                        paddingLeft: "8px",
                        paddingRight: "8px"
                    },
                    ".cm-gutters": {
                        borderRight: "1px solid #ddd",
                        userSelect: "none"
                    },
                    ".cm-activeLineGutter": {
                        backgroundColor: "#e0e0e0"
                    }
                })
            ];

            // Add language extension if it exists
            // LanguageSupport objects (from javascript(), php(), etc.) are pushed directly
            if (languageExtension) {
                if (Array.isArray(languageExtension)) {
                    // Empty array for plain text - don't add
                    if (languageExtension.length > 0) {
                        extensions.push(...languageExtension);
                    }
                } else {
                    // LanguageSupport object - add directly (per CodeMirror docs)
                    extensions.push(languageExtension);
                }
            }

            // Add linting support based on file extension
            const linterExtension = getLinterForExtension(extension);
            if (linterExtension) {
                extensions.push(linterExtension);
                console.log('Linting enabled for', extension);
            }

            // Add dark theme extension if dark mode
            if (isDarkMode) {
                extensions.push(oneDark);
                // Override some theme styles for dark mode
                extensions.push(EditorView.theme({
                    ".cm-gutters": {
                        borderRight: "1px solid #444"
                    },
                    ".cm-activeLineGutter": {
                        backgroundColor: "#2a2a2a"
                    }
                }, { dark: true }));
            }

            // Create editor state
            const state = EditorState.create({
                doc: content,
                extensions: extensions
            });

            // Create editor view
            editorView = new EditorView({
                state: state,
                parent: container
            });

            console.log('CodeMirror 6 editor initialized successfully with professional configuration');
            return editorView;
        }

        // Get current editor content
        function getEditorContent() {
            if (!editorView) return null;
            return editorView.state.doc.toString();
        }

        // Update editor theme when system theme changes
        function updateEditorTheme() {
            if (!editorView) return;

            const currentContent = getEditorContent();
            const extension = document.getElementById('editorFileExtension').textContent.replace('Type: ', '');

            // Reinitialize editor with new theme
            initializeEditor(currentContent, extension, false);
        }

        // Export functions to global scope for use in other scripts
        window.codeMirrorEditor = {
            initialize: initializeEditor,
            getContent: getEditorContent,
            updateTheme: updateEditorTheme,
            setModified: (value) => { isModified = value; },
            isModified: () => isModified,
            setCurrentFilePath: (path) => { currentFilePath = path; },
            getCurrentFilePath: () => currentFilePath,
            setOriginalContent: (content) => { originalContent = content; },
            getOriginalContent: () => originalContent
        };

        console.log('CodeMirror 6 initialized successfully');
    </script>
</head>
<body class="h-screen overflow-hidden bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-200">

    <!-- Main Container -->
    <div class="flex flex-col h-screen">

        <!-- Top Toolbar -->
        <header class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 shadow-sm">
            <div class="flex items-center justify-between px-4 py-3">

                <!-- Left Section: Logo & Breadcrumb -->
                <div class="flex items-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <i class="fas fa-folder text-2xl text-primary-600 dark:text-primary-400"></i>
                        <h1 class="text-xl font-bold text-gray-900 dark:text-white hidden sm:block"><?= htmlspecialchars($app_name ?? 'WebFTP', ENT_QUOTES, 'UTF-8') ?></h1>
                    </div>

                    <!-- Breadcrumb -->
                    <nav class="flex items-center space-x-1 text-sm">
                        <a href="#" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 transition">
                            <i class="fas fa-house"></i>
                        </a>
                        <span class="text-gray-400 dark:text-gray-600">/</span>
                        <span class="text-gray-700 dark:text-gray-300 font-medium">Home</span>
                    </nav>
                </div>

                <!-- Right Section: Actions & Profile -->
                <div class="flex items-center space-x-3">

                    <!-- Action Buttons -->
                    <div class="hidden md:flex items-center space-x-2">
                        <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition" title="Upload">
                            <i class="fas fa-upload"></i>
                        </button>
                        <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition" title="New Folder">
                            <i class="fas fa-folder-plus"></i>
                        </button>
                    </div>

                    <!-- Profile Dropdown -->
                    <div class="relative">
                        <button id="profileButton" class="flex items-center space-x-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition">
                            <div class="w-8 h-8 bg-primary-600 dark:bg-primary-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                                <?= strtoupper(substr($ftp_username ?? 'U', 0, 1)) ?>
                            </div>
                            <div class="hidden sm:block text-left">
                                <div class="text-sm font-medium text-gray-900 dark:text-white"><?= htmlspecialchars($ftp_username ?? 'User', ENT_QUOTES, 'UTF-8') ?></div>
                                <div class="text-xs text-gray-500 dark:text-gray-400"><?= htmlspecialchars($ftp_host ?? '', ENT_QUOTES, 'UTF-8') ?></div>
                            </div>
                            <i class="fas fa-chevron-down text-gray-500"></i>
                        </button>

                        <!-- Dropdown Menu -->
                        <div id="profileDropdown" class="hidden absolute right-0 mt-2 w-72 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 py-2 z-50">

                            <!-- User Info -->
                            <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                                <div class="text-sm font-medium text-gray-900 dark:text-white"><?= htmlspecialchars($ftp_username ?? 'User', ENT_QUOTES, 'UTF-8') ?></div>
                                <div class="text-xs text-gray-500 dark:text-gray-400">Connected to: <?= htmlspecialchars($ftp_host ?? '', ENT_QUOTES, 'UTF-8') ?></div>
                            </div>

                            <!-- Theme Toggle -->
                            <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                                <div class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase mb-2">Theme</div>
                                <div class="flex items-center space-x-2">
                                    <button onclick="switchTheme('light')" class="flex-1 px-3 py-2 text-sm rounded-md transition <?= ($theme ?? 'dark') === 'light' ? 'bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 font-medium' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700' ?>">
                                        <i class="fas fa-sun mr-1"></i>
                                        Light
                                    </button>
                                    <button onclick="switchTheme('dark')" class="flex-1 px-3 py-2 text-sm rounded-md transition <?= ($theme ?? 'dark') === 'dark' ? 'bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 font-medium' : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700' ?>">
                                        <i class="fas fa-moon mr-1"></i>
                                        Dark
                                    </button>
                                </div>
                            </div>

                            <!-- Language Selection -->
                            <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                                <div class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase mb-2">Language</div>
                                <select onchange="switchLanguage(this.value)" class="w-full px-3 py-2 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-md text-sm text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-transparent">
                                    <option value="en" <?= ($language ?? 'en') === 'en' ? 'selected' : '' ?>>🇬🇧 English</option>
                                    <option value="fr" <?= ($language ?? 'en') === 'fr' ? 'selected' : '' ?>>🇫🇷 Français</option>
                                    <option value="es" <?= ($language ?? 'en') === 'es' ? 'selected' : '' ?>>🇪🇸 Español</option>
                                    <option value="de" <?= ($language ?? 'en') === 'de' ? 'selected' : '' ?>>🇩🇪 Deutsch</option>
                                    <option value="it" <?= ($language ?? 'en') === 'it' ? 'selected' : '' ?>>🇮🇹 Italiano</option>
                                    <option value="pt" <?= ($language ?? 'en') === 'pt' ? 'selected' : '' ?>>🇵🇹 Português</option>
                                    <option value="ar" <?= ($language ?? 'en') === 'ar' ? 'selected' : '' ?>>🇸🇦 العربية</option>
                                </select>
                            </div>

                            <!-- Logout -->
                            <div class="px-2 py-2">
                                <a href="/logout" class="flex items-center w-full px-3 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-md transition">
                                    <i class="fas fa-right-from-bracket mr-2"></i>
                                    Logout
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <div class="flex flex-1 overflow-hidden">

            <!-- Left Sidebar: Folder Tree -->
            <aside id="sidebar" class="bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col" style="width: 260px; min-width: 200px; max-width: 600px;">
                <!-- Explorer Header -->
                <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">Explorer</h3>
                </div>

                <!-- Folder Tree -->
                <div class="flex-1 overflow-y-auto p-3">
                    <!-- Loading State -->
                    <div id="treeLoading" class="flex items-center justify-center py-10">
                        <div class="text-center">
                            <i class="fas fa-spinner fa-spin text-3xl text-gray-400 dark:text-gray-500 mb-3"></i>
                            <p class="text-sm text-gray-500 dark:text-gray-400">Loading folders...</p>
                        </div>
                    </div>

                    <!-- Tree Container -->
                    <div id="folderTree" class="space-y-1 hidden"></div>

                    <!-- Error State -->
                    <div id="treeError" class="hidden px-4 py-6 text-center">
                        <i class="fas fa-exclamation-triangle text-yellow-500 text-2xl mb-3"></i>
                        <p class="text-sm text-gray-600 dark:text-gray-400">Unable to load folders</p>
                        <button id="retryLoadTree" class="mt-3 text-sm text-primary-600 dark:text-primary-400 hover:underline font-medium">Retry</button>
                    </div>
                </div>

                <!-- Status Bar -->
                <div class="px-4 py-3 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900">
                    <p class="text-sm text-gray-500 dark:text-gray-400 font-medium">
                        <span id="selectedCount">0</span> items selected
                    </p>
                </div>
            </aside>

            <!-- Resize Handle -->
            <div id="resizeHandle" class="w-1 bg-gray-200 dark:bg-gray-700 hover:bg-primary-500 dark:hover:bg-primary-500 cursor-col-resize transition-colors flex-shrink-0" title="Drag to resize"></div>

            <!-- Right Content Area -->
            <main class="flex-1 flex flex-col overflow-hidden">

                <!-- Action Toolbar -->
                <div class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3">
                    <div class="flex items-center justify-between gap-4">

                        <!-- Left: Action Icons -->
                        <div class="flex items-center gap-1">
                            <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="Upload File">
                                <i class="fas fa-upload"></i>
                            </button>
                            <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="Download">
                                <i class="fas fa-download"></i>
                            </button>
                            <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="New File">
                                <i class="fas fa-file-circle-plus"></i>
                            </button>
                            <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="New Folder">
                                <i class="fas fa-folder-plus"></i>
                            </button>
                            <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="Delete">
                                <i class="fas fa-trash"></i>
                            </button>
                            <button class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="Rename">
                                <i class="fas fa-pen"></i>
                            </button>
                            <button id="refreshBtn" onclick="refreshCurrentFolder()" class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="Refresh">
                                <i class="fas fa-arrows-rotate"></i>
                            </button>

                            <div class="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>

                            <!-- View Toggle -->
                            <button id="viewToggleList" class="p-2 text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/30 rounded transition" title="List View">
                                <i class="fas fa-list"></i>
                            </button>
                            <button id="viewToggleGrid" class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition" title="Grid View">
                                <i class="fas fa-grip"></i>
                            </button>
                        </div>

                        <!-- Right: Path Navigation -->
                        <div class="flex-1 max-w-2xl">
                            <div class="relative">
                                <i class="fas fa-folder-open absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 dark:text-gray-500"></i>
                                <input
                                    type="text"
                                    value="/"
                                    id="pathInput"
                                    class="w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                                    placeholder="Enter path..."
                                >
                            </div>
                        </div>
                    </div>
                </div>

                <!-- File Content Area -->
                <div class="flex-1 overflow-auto bg-gray-50 dark:bg-gray-900">
                    <!-- Loading State -->
                    <div id="contentLoading" class="hidden flex items-center justify-center h-full">
                        <div class="text-center">
                            <i class="fas fa-spinner fa-spin text-4xl text-primary-500 mb-4"></i>
                            <p class="text-gray-600 dark:text-gray-400">Loading...</p>
                        </div>
                    </div>

                    <!-- Empty State -->
                    <div id="contentEmpty" class="flex items-center justify-center h-full">
                        <div class="text-center px-6">
                            <i class="fas fa-folder-open text-gray-300 dark:text-gray-600 text-6xl mb-4"></i>
                            <h3 class="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2">Select a Folder</h3>
                            <p class="text-gray-500 dark:text-gray-400">Click on a folder in the sidebar to view its contents</p>
                        </div>
                    </div>

                <!-- List View (Table) -->
                <div id="listView" class="h-full hidden overflow-auto">
                    <table class="w-full text-sm">
                        <colgroup>
                            <col style="width: 3%;">
                            <col style="width: 45%;">
                            <col style="width: 13%;">
                            <col style="width: 25%;">
                            <col style="width: 14%;">
                        </colgroup>
                        <thead class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider">
                                    <i class="fas fa-check-square text-base"></i>
                                </th>
                                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-primary-500 dark:hover:text-primary-400 transition" onclick="sortListView('name')">
                                    <div class="flex items-center gap-2">
                                        Name
                                        <i class="fas fa-sort text-xs opacity-50"></i>
                                    </div>
                                </th>
                                <th class="px-4 py-3 text-right text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-primary-500 dark:hover:text-primary-400 transition" onclick="sortListView('size')">
                                    <div class="flex items-center justify-end gap-2">
                                        Size
                                        <i class="fas fa-sort text-xs opacity-50"></i>
                                    </div>
                                </th>
                                <th class="px-4 py-3 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-primary-500 dark:hover:text-primary-400 transition" onclick="sortListView('modified')">
                                    <div class="flex items-center gap-2">
                                        Modified
                                        <i class="fas fa-sort text-xs opacity-50"></i>
                                    </div>
                                </th>
                                <th class="px-4 py-3 text-center text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider cursor-pointer hover:text-primary-500 dark:hover:text-primary-400 transition" onclick="sortListView('permissions')">
                                    <div class="flex items-center justify-center gap-2">
                                        Permissions
                                        <i class="fas fa-sort text-xs opacity-50"></i>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody id="listViewBody" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                            <!-- Dynamic content will be inserted here -->
                        </tbody>
                    </table>
                </div>

                <!-- Grid View -->
                <div id="gridView" class="hidden p-6">
                    <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 2xl:grid-cols-8 gap-4">
                        <!-- Sample Folder -->
                        <div class="group p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 hover:shadow-md transition cursor-pointer">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-folder text-6xl text-yellow-500 mb-2"></i>
                                <span class="text-sm font-medium text-gray-900 dark:text-white text-center truncate w-full">composer</span>
                            </div>
                        </div>
                        <div class="group p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 hover:shadow-md transition cursor-pointer">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-folder text-6xl text-yellow-500 mb-2"></i>
                                <span class="text-sm font-medium text-gray-900 dark:text-white text-center truncate w-full">.ssh</span>
                            </div>
                        </div>
                        <div class="group p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 hover:shadow-md transition cursor-pointer">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-folder text-6xl text-yellow-500 mb-2"></i>
                                <span class="text-sm font-medium text-gray-900 dark:text-white text-center truncate w-full">backup</span>
                            </div>
                        </div>
                        <div class="group p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 hover:shadow-md transition cursor-pointer">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-folder text-6xl text-yellow-500 mb-2"></i>
                                <span class="text-sm font-medium text-gray-900 dark:text-white text-center truncate w-full">web</span>
                            </div>
                        </div>
                        <div class="group p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-primary-300 dark:hover:border-primary-600 hover:shadow-md transition cursor-pointer">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-file-pdf text-6xl text-red-500 mb-2"></i>
                                <span class="text-sm font-medium text-gray-900 dark:text-white text-center truncate w-full">document.pdf</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        </div>
    </div>

    <!-- Vanilla JavaScript for Interactivity -->
    <script>
        // File Icon Configuration (from config.php)
        const FILE_ICON_CONFIG = <?= json_encode($file_icons) ?>;

        // =================================================================
        // GLOBAL FUNCTIONS (accessible from inline onclick attributes)
        // =================================================================

        /**
         * Open file in editor or preview
         */
        function openFile(path) {
            console.log('Opening file:', path);

            // Show editor panel and overlay
            openEditorPanel();

            // Show loading state
            showEditorState('loading');

            // Fetch file content from API
            fetch('/api/file/read?path=' + encodeURIComponent(path))
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Store file info
                        window.codeMirrorEditor.setCurrentFilePath(data.path);
                        window.codeMirrorEditor.setOriginalContent(data.content);
                        window.codeMirrorEditor.setModified(false);

                        // Update UI
                        updateEditorUI(data);

                        // Check if editable or previewable
                        if (data.isEditable) {
                            // Initialize code editor
                            showEditorState('editor');
                            window.codeMirrorEditor.initialize(data.content, data.extension, false);
                            document.getElementById('editorSaveBtn').classList.remove('hidden');
                            document.getElementById('editorFooter').classList.remove('hidden');
                        } else if (data.isPreviewable) {
                            // Show image preview (content is already base64 encoded from backend)
                            showEditorState('preview');
                            const imagePreview = document.getElementById('imagePreview');
                            imagePreview.src = 'data:image/' + data.extension + ';base64,' + data.content;
                            document.getElementById('editorSaveBtn').classList.add('hidden');
                            document.getElementById('editorFooter').classList.remove('hidden');
                        } else {
                            // File type not supported
                            showEditorState('error');
                            document.getElementById('editorErrorMessage').textContent = 'This file type cannot be edited or previewed.';
                        }
                    } else {
                        // Show error
                        showEditorState('error');
                        document.getElementById('editorErrorMessage').textContent = data.message || 'Failed to load file.';
                    }
                })
                .catch(error => {
                    console.error('Error loading file:', error);
                    showEditorState('error');
                    document.getElementById('editorErrorMessage').textContent = 'Failed to connect to server.';
                });
        }

        /**
         * Preview file (wrapper for openFile)
         */
        function previewFile(path) {
            openFile(path);
        }

        /**
         * Update editor UI with file info
         */
        function updateEditorUI(fileData) {
            // Update file name
            document.getElementById('editorFileName').textContent = fileData.path.split('/').pop();
            document.getElementById('editorFilePath').textContent = fileData.path;

            // Update file icon
            const icon = getFileIcon(fileData.path);
            document.getElementById('editorFileIcon').className = icon;

            // Update file size
            document.getElementById('editorFileSize').textContent = 'Size: ' + formatFileSize(fileData.size);

            // Update file extension
            document.getElementById('editorFileExtension').textContent = 'Type: ' + fileData.extension;

            // Hide modified status
            document.getElementById('editorModifiedStatus').classList.add('hidden');
        }

        /**
         * Show specific editor state
         */
        function showEditorState(state) {
            // Hide all states
            document.getElementById('editorLoading').classList.add('hidden');
            document.getElementById('editorError').classList.add('hidden');
            document.getElementById('editorContainer').classList.add('hidden');
            document.getElementById('imagePreviewContainer').classList.add('hidden');
            document.getElementById('editorFileTooLarge').classList.add('hidden');

            // Show requested state
            switch(state) {
                case 'loading':
                    document.getElementById('editorLoading').classList.remove('hidden');
                    break;
                case 'error':
                    document.getElementById('editorError').classList.remove('hidden');
                    break;
                case 'editor':
                    document.getElementById('editorContainer').classList.remove('hidden');
                    break;
                case 'preview':
                    document.getElementById('imagePreviewContainer').classList.remove('hidden');
                    break;
                case 'too-large':
                    document.getElementById('editorFileTooLarge').classList.remove('hidden');
                    break;
            }
        }

        /**
         * Open editor panel
         */
        function openEditorPanel() {
            const panel = document.getElementById('editorPanel');
            const overlay = document.getElementById('editorOverlay');

            // Show overlay
            overlay.classList.remove('hidden');
            overlay.classList.add('opacity-0');
            setTimeout(() => overlay.classList.remove('opacity-0'), 10);

            // Slide in panel
            panel.classList.remove('translate-x-full');
        }

        /**
         * Close editor panel
         */
        function closeEditor() {
            // Check if modified
            if (window.codeMirrorEditor && window.codeMirrorEditor.isModified()) {
                if (!confirm('You have unsaved changes. Are you sure you want to close?')) {
                    return;
                }
            }

            const panel = document.getElementById('editorPanel');
            const overlay = document.getElementById('editorOverlay');

            // Slide out panel
            panel.classList.add('translate-x-full');

            // Hide overlay
            overlay.classList.add('opacity-0');
            setTimeout(() => overlay.classList.add('hidden'), 300);

            // Reset modified state
            if (window.codeMirrorEditor) {
                window.codeMirrorEditor.setModified(false);
            }
        }

        /**
         * Save file with CSRF protection
         */
        function saveFile() {
            // Get file path and content
            const filePath = window.codeMirrorEditor.getCurrentFilePath();
            const content = window.codeMirrorEditor.getContent();

            if (!filePath || content === null) {
                alert('No file is currently open.');
                return;
            }

            // Get CSRF token
            const csrfToken = '<?= htmlspecialchars($csrf_token ?? '', ENT_QUOTES, 'UTF-8') ?>';

            if (!csrfToken) {
                alert('Security token missing. Please refresh the page.');
                return;
            }

            // Show saving indicator
            const saveBtn = document.getElementById('editorSaveBtn');
            const originalBtnContent = saveBtn.innerHTML;
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Saving...</span>';

            // Prepare form data
            const formData = new URLSearchParams();
            formData.append('path', filePath);
            formData.append('content', content);
            formData.append('_csrf_token', csrfToken);

            // Send save request
            fetch('/api/file/write', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: formData.toString()
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Success - update UI
                    window.codeMirrorEditor.setModified(false);
                    document.getElementById('editorModifiedStatus').classList.add('hidden');

                    // Show success message briefly
                    saveBtn.innerHTML = '<i class="fas fa-check"></i><span>Saved!</span>';
                    setTimeout(() => {
                        saveBtn.innerHTML = originalBtnContent;
                        saveBtn.disabled = false;
                    }, 2000);
                } else {
                    // Error - show message
                    alert('Failed to save file: ' + (data.message || 'Unknown error'));
                    saveBtn.innerHTML = originalBtnContent;
                    saveBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error saving file:', error);
                alert('Failed to save file. Connection error.');
                saveBtn.innerHTML = originalBtnContent;
                saveBtn.disabled = false;
            });
        }

        /**
         * Sort list view by column
         */
        function sortListView(column) {
            if (!window.currentListData) return;

            const data = window.currentListData;

            // Toggle sort direction if clicking the same column
            if (data.sortColumn === column) {
                data.sortDirection = data.sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                data.sortColumn = column;
                data.sortDirection = 'asc';
            }

            // Combine folders and files for sorting
            let allItems = [
                ...data.folders.map(f => ({...f, type: 'folder'})),
                ...data.files.map(f => ({...f, type: 'file'}))
            ];

            // Sort based on column
            allItems.sort((a, b) => {
                let aVal, bVal;

                switch(column) {
                    case 'name':
                        aVal = a.name.toLowerCase();
                        bVal = b.name.toLowerCase();
                        break;
                    case 'size':
                        aVal = a.size || 0;
                        bVal = b.size || 0;
                        break;
                    case 'modified':
                        aVal = a.modified || '';
                        bVal = b.modified || '';
                        break;
                    case 'permissions':
                        aVal = convertPermissionsToOctal(a.permissions);
                        bVal = convertPermissionsToOctal(b.permissions);
                        break;
                    default:
                        return 0;
                }

                if (aVal < bVal) return data.sortDirection === 'asc' ? -1 : 1;
                if (aVal > bVal) return data.sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            // Re-render the list
            const listViewBody = document.getElementById('listViewBody');
            listViewBody.innerHTML = '';

            allItems.forEach(item => {
                const row = createListRow(item, item.type, data.currentPath);
                listViewBody.appendChild(row);
            });

            // Update sort icons
            updateSortIcons(column, data.sortDirection);
        }

        /**
         * Update sort icons in table headers
         */
        function updateSortIcons(activeColumn, direction) {
            const headers = document.querySelectorAll('#listView th[onclick]');
            headers.forEach(header => {
                const icon = header.querySelector('i');
                const columnName = header.getAttribute('onclick').match(/sortListView\('(\w+)'\)/)[1];

                if (columnName === activeColumn) {
                    icon.className = direction === 'asc'
                        ? 'fas fa-sort-up text-xs text-primary-500 dark:text-primary-400'
                        : 'fas fa-sort-down text-xs text-primary-500 dark:text-primary-400';
                } else {
                    icon.className = 'fas fa-sort text-xs opacity-50';
                }
            });
        }

        /**
         * Refresh current folder contents
         */
        function refreshCurrentFolder() {
            // Get current path from input
            const pathInput = document.getElementById('pathInput');
            const currentPath = pathInput ? pathInput.value : '/';

            // Show visual feedback - spin the refresh icon
            const refreshBtn = document.getElementById('refreshBtn');
            const icon = refreshBtn.querySelector('i');
            icon.classList.add('fa-spin');

            // Store the loadFolderContents function reference
            if (window.loadFolderContents) {
                window.loadFolderContents(currentPath);

                // Stop spinning after 1 second
                setTimeout(() => {
                    icon.classList.remove('fa-spin');
                }, 1000);
            } else {
                // If function not available yet, remove spin immediately
                icon.classList.remove('fa-spin');
                console.error('loadFolderContents function not available');
            }
        }

        // =================================================================
        // FILE SELECTION AND ACTIONS
        // =================================================================

        // Global variable to track selected file
        window.selectedFile = null;

        /**
         * Handle file/folder selection
         */
        function selectItem(path, name, type, extension) {
            window.selectedFile = {
                path: path,
                name: name,
                type: type,
                extension: extension
            };
        }

        /**
         * Clear file selection
         */
        function clearSelection() {
            window.selectedFile = null;

            // Uncheck all checkboxes
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });

            // Remove visual selection from grid cards
            document.querySelectorAll('.file-card-selected').forEach(c => {
                c.classList.remove('file-card-selected', 'border-primary-600', 'dark:border-primary-400', 'bg-primary-50', 'dark:bg-primary-900/20');
            });

            // Remove visual selection from list rows
            document.querySelectorAll('.file-row-selected').forEach(r => {
                r.classList.remove('file-row-selected', 'bg-primary-50', 'dark:bg-primary-900/20');
            });
        }

        /**
         * Get appropriate icon class for file type
         */
        function getFileIcon(filename) {
            const ext = filename.split('.').pop().toLowerCase();

            // Search through all configured file icon categories
            for (const category in FILE_ICON_CONFIG) {
                const config = FILE_ICON_CONFIG[category];

                // Check if this extension matches this category
                if (config.extensions && config.extensions.includes(ext)) {
                    return config.icon;
                }
            }

            // Return default icon if no match found
            return FILE_ICON_CONFIG.default?.icon || 'fas fa-file text-gray-400 dark:text-gray-500';
        }

        /**
         * Format file size to human readable format
         */
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // =================================================================
        // END GLOBAL FUNCTIONS
        // =================================================================

        document.addEventListener('DOMContentLoaded', function() {
            // Profile Dropdown Toggle
            const profileButton = document.getElementById('profileButton');
            const profileDropdown = document.getElementById('profileDropdown');

            profileButton.addEventListener('click', function(e) {
                e.stopPropagation();
                profileDropdown.classList.toggle('hidden');
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!profileDropdown.contains(e.target) && !profileButton.contains(e.target)) {
                    profileDropdown.classList.add('hidden');
                }
            });

            // Dynamic Folder Tree Management
            const folderTree = document.getElementById('folderTree');
            const treeLoading = document.getElementById('treeLoading');
            const treeError = document.getElementById('treeError');
            const retryLoadTree = document.getElementById('retryLoadTree');

            // Track expanded folders
            const expandedFolders = new Set();

            /**
             * Load folder tree from API
             */
            function loadFolderTree(path = '/') {
                // Show loading
                treeLoading.classList.remove('hidden');
                folderTree.classList.add('hidden');
                treeError.classList.add('hidden');

                fetch('/api/folder-tree?path=' + encodeURIComponent(path))
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Hide loading
                            treeLoading.classList.add('hidden');
                            folderTree.classList.remove('hidden');

                            // Render tree
                            if (path === '/') {
                                // Initial load - render root
                                renderTree(data.tree);
                            }
                        } else {
                            throw new Error(data.message || 'Failed to load tree');
                        }
                    })
                    .catch(error => {
                        console.error('Error loading folder tree:', error);
                        treeLoading.classList.add('hidden');
                        treeError.classList.remove('hidden');
                    });
            }

            /**
             * Render folder tree
             */
            function renderTree(tree, parentElement = folderTree, level = 0) {
                tree.forEach(item => {
                    const folderElement = createFolderElement(item, level);
                    parentElement.appendChild(folderElement);
                });
            }

            /**
             * Create folder or file element
             */
            function createFolderElement(item, level) {
                const div = document.createElement('div');
                div.dataset.path = item.path;
                div.dataset.level = level;
                div.dataset.type = item.type;

                // Create button
                const button = document.createElement('button');
                button.className = 'flex items-center w-full px-2 py-2 text-sm text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition';
                button.style.paddingLeft = (level * 12 + 8) + 'px';

                if (item.type === 'directory') {
                    // Arrow icon for folders
                    const arrow = document.createElement('i');
                    arrow.className = 'fas fa-chevron-right text-xs text-gray-400 dark:text-gray-500 mr-2 transition-transform';
                    button.appendChild(arrow);

                    // Folder icon
                    const folderIcon = document.createElement('i');
                    folderIcon.className = level === 0 ? 'fas fa-folder text-base text-primary-500 mr-2' : 'fas fa-folder text-base text-yellow-500 mr-2';
                    button.appendChild(folderIcon);

                    // Folder name
                    const span = document.createElement('span');
                    span.className = 'text-sm font-medium';
                    span.textContent = item.name;
                    button.appendChild(span);

                    // Container for children
                    const childrenContainer = document.createElement('div');
                    childrenContainer.className = 'hidden';
                    childrenContainer.dataset.childrenFor = item.path;

                    // Click handler for folders
                    button.addEventListener('click', function(e) {
                        // Load folder contents in main area
                        loadFolderContents(item.path);

                        // Toggle folder expand/collapse
                        toggleFolder(item.path, arrow, childrenContainer, level);

                        e.stopPropagation();
                    });

                    div.appendChild(button);
                    div.appendChild(childrenContainer);
                } else {
                    // File - no arrow, just icon and name

                    // Spacer to align with folders (same width as arrow)
                    const spacer = document.createElement('span');
                    spacer.className = 'inline-block w-4 mr-2';
                    button.appendChild(spacer);

                    // File icon based on extension
                    const fileIcon = document.createElement('i');
                    fileIcon.className = getFileIcon(item.name).replace(/text-\w+/g, 'text-base') + ' mr-2';
                    button.appendChild(fileIcon);

                    // File name
                    const span = document.createElement('span');
                    span.textContent = item.name;
                    span.className = 'text-sm';
                    button.appendChild(span);

                    // Click handler for files - show file info in main content
                    button.addEventListener('click', function(e) {
                        displaySelectedFile(item);
                        e.stopPropagation();
                    });

                    div.appendChild(button);
                }

                return div;
            }

            /**
             * Get appropriate icon class for file type
             * Uses configuration from config.php file_icons section
             */
            function getFileIcon(filename) {
                const ext = filename.split('.').pop().toLowerCase();

                // Search through all configured file icon categories
                for (const category in FILE_ICON_CONFIG) {
                    const config = FILE_ICON_CONFIG[category];

                    // Check if this extension matches this category
                    if (config.extensions && config.extensions.includes(ext)) {
                        return config.icon;
                    }
                }

                // Return default icon if no match found
                return FILE_ICON_CONFIG.default?.icon || 'fas fa-file text-gray-400 dark:text-gray-500';
            }

            /**
             * Toggle folder expand/collapse
             */
            function toggleFolder(path, arrow, childrenContainer, level) {
                const isExpanded = expandedFolders.has(path);

                if (isExpanded) {
                    // Collapse
                    arrow.classList.remove('rotate-90');
                    childrenContainer.classList.add('hidden');
                    expandedFolders.delete(path);
                } else {
                    // Expand
                    arrow.classList.add('rotate-90');
                    childrenContainer.classList.remove('hidden');
                    expandedFolders.add(path);

                    // Load children if not loaded yet
                    if (childrenContainer.children.length === 0) {
                        loadFolderChildren(path, childrenContainer, level + 1);
                    }
                }
            }

            /**
             * Load children for a folder
             */
            function loadFolderChildren(path, container, level) {
                // Show loading indicator
                const loading = document.createElement('div');
                loading.className = 'flex items-center px-3 py-2 text-sm text-gray-500 dark:text-gray-400';
                loading.style.paddingLeft = (level * 16 + 12) + 'px';
                loading.innerHTML = '<i class="fas fa-spinner fa-spin mr-2 text-base"></i>Loading...';
                container.appendChild(loading);

                fetch('/api/folder-tree?path=' + encodeURIComponent(path))
                    .then(response => response.json())
                    .then(data => {
                        // Remove loading indicator
                        container.innerHTML = '';

                        if (data.success && data.tree.length > 0) {
                            renderTree(data.tree, container, level);
                        } else if (data.tree.length === 0) {
                            // Empty folder
                            const empty = document.createElement('div');
                            empty.className = 'px-3 py-2 text-sm text-gray-400 dark:text-gray-500 italic';
                            empty.style.paddingLeft = (level * 16 + 12) + 'px';
                            empty.textContent = 'Empty';
                            container.appendChild(empty);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading folder children:', error);
                        container.innerHTML = '';
                        const errorMsg = document.createElement('div');
                        errorMsg.className = 'px-3 py-2 text-sm text-red-500';
                        errorMsg.style.paddingLeft = (level * 16 + 12) + 'px';
                        errorMsg.textContent = 'Error loading';
                        container.appendChild(errorMsg);
                    });
            }

            // Retry button
            retryLoadTree.addEventListener('click', function() {
                loadFolderTree();
            });

            // Initial load
            loadFolderTree();

            // View Toggle (List/Grid)
            const viewToggleList = document.getElementById('viewToggleList');
            const viewToggleGrid = document.getElementById('viewToggleGrid');
            const listView = document.getElementById('listView');
            const gridView = document.getElementById('gridView');

            viewToggleList.addEventListener('click', function() {
                // Show list view
                listView.classList.remove('hidden');
                gridView.classList.add('hidden');

                // Update button states
                viewToggleList.className = 'p-2 text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/30 rounded transition';
                viewToggleGrid.className = 'p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition';
            });

            viewToggleGrid.addEventListener('click', function() {
                // Show grid view
                listView.classList.add('hidden');
                gridView.classList.remove('hidden');

                // Update button states
                viewToggleGrid.className = 'p-2 text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/30 rounded transition';
                viewToggleList.className = 'p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition';
            });

            // Sidebar Resize Functionality
            const sidebar = document.getElementById('sidebar');
            const resizeHandle = document.getElementById('resizeHandle');
            let isResizing = false;
            let startX = 0;
            let startWidth = 0;

            // Apply saved width from localStorage (default is 280px now)
            const savedWidth = localStorage.getItem('sidebarWidth');
            if (savedWidth) {
                sidebar.style.width = savedWidth + 'px';
            }

            // Mouse down on resize handle
            resizeHandle.addEventListener('mousedown', function(e) {
                isResizing = true;
                startX = e.clientX;
                startWidth = sidebar.offsetWidth;

                // Prevent text selection during resize
                document.body.style.userSelect = 'none';
                document.body.style.cursor = 'col-resize';

                e.preventDefault();
            });

            // Mouse move - resize sidebar
            document.addEventListener('mousemove', function(e) {
                if (!isResizing) return;

                const deltaX = e.clientX - startX;
                const newWidth = startWidth + deltaX;

                // Get min and max width from inline styles
                const minWidth = parseInt(getComputedStyle(sidebar).minWidth);
                const maxWidth = parseInt(getComputedStyle(sidebar).maxWidth);

                // Apply new width within constraints
                if (newWidth >= minWidth && newWidth <= maxWidth) {
                    sidebar.style.width = newWidth + 'px';
                }
            });

            // Mouse up - stop resizing
            document.addEventListener('mouseup', function() {
                if (isResizing) {
                    isResizing = false;
                    document.body.style.userSelect = '';
                    document.body.style.cursor = '';

                    // Save width to localStorage
                    localStorage.setItem('sidebarWidth', sidebar.offsetWidth);
                }
            });

            /**
             * Load folder contents in main content area
             */
            function loadFolderContents(path) {
                // Clear any file selection when loading new folder
                clearSelection();

                // Get container elements
                const contentEmpty = document.getElementById('contentEmpty');
                const contentLoading = document.getElementById('contentLoading');
                const listView = document.getElementById('listView');
                const gridView = document.getElementById('gridView');

                // Show loading state
                if (contentEmpty) contentEmpty.classList.add('hidden');
                if (contentLoading) contentLoading.classList.remove('hidden');
                listView.classList.add('hidden');
                gridView.classList.add('hidden');

                // Update path input
                const pathInput = document.getElementById('pathInput');
                if (pathInput) {
                    pathInput.value = path;
                }

                // Fetch folder contents
                fetch('/api/folder-contents?path=' + encodeURIComponent(path))
                    .then(response => response.json())
                    .then(data => {
                        // Hide loading
                        if (contentLoading) contentLoading.classList.add('hidden');

                        if (data.success) {
                            // Render contents in BOTH views
                            renderEliteGrid(data.folders, data.files, path);
                            renderListView(data.folders, data.files, path);

                            // Show the appropriate view based on user preference
                            const currentView = localStorage.getItem('fileManagerView') || 'list';
                            if (currentView === 'list') {
                                listView.classList.remove('hidden');
                                gridView.classList.add('hidden');
                            } else {
                                gridView.classList.remove('hidden');
                                listView.classList.add('hidden');
                            }
                        } else {
                            // Show error
                            if (contentEmpty) {
                                contentEmpty.classList.remove('hidden');
                                contentEmpty.innerHTML = '<div class="text-center px-6"><i class="fas fa-exclamation-triangle text-red-500 text-6xl mb-4"></i><h3 class="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2">Error Loading Folder</h3><p class="text-gray-500 dark:text-gray-400">' + (data.message || 'Unable to load folder contents') + '</p></div>';
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error loading folder contents:', error);
                        if (contentLoading) contentLoading.classList.add('hidden');
                        if (contentEmpty) {
                            contentEmpty.classList.remove('hidden');
                            contentEmpty.innerHTML = '<div class="text-center px-6"><i class="fas fa-exclamation-triangle text-red-500 text-6xl mb-4"></i><h3 class="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-2">Connection Error</h3><p class="text-gray-500 dark:text-gray-400">Unable to connect to server</p></div>';
                        }
                    });
            }

            // Make loadFolderContents globally accessible for refresh button
            window.loadFolderContents = loadFolderContents;

            /**
             * Render folder/file contents in elite grid design
             */
            function renderEliteGrid(folders, files, currentPath) {
                const gridView = document.getElementById('gridView');

                // Create elite grid container
                gridView.innerHTML = '<div class="p-6"><div id="eliteGrid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-5"></div></div>';

                const eliteGrid = document.getElementById('eliteGrid');

                // Render folders first
                folders.forEach(folder => {
                    const card = createEliteCard(folder, 'folder', currentPath);
                    eliteGrid.appendChild(card);
                });

                // Render files
                files.forEach(file => {
                    const card = createEliteCard(file, 'file', currentPath);
                    eliteGrid.appendChild(card);
                });

                // If empty
                if (folders.length === 0 && files.length === 0) {
                    eliteGrid.innerHTML = '<div class="col-span-full text-center py-16"><i class="fas fa-folder-open text-gray-300 dark:text-gray-600 text-6xl mb-4"></i><p class="text-gray-500 dark:text-gray-400">This folder is empty</p></div>';
                }
            }

            /**
             * Create elite card for folder or file
             */
            function createEliteCard(item, type, currentPath) {
                const card = document.createElement('div');
                card.className = 'group relative bg-white dark:bg-gray-800 rounded-xl p-5 border-2 border-gray-200 dark:border-gray-700 hover:border-primary-500 dark:hover:border-primary-500 hover:shadow-2xl hover:scale-105 transform transition-all duration-300 cursor-pointer';
                card.dataset.path = item.path;
                card.dataset.type = type;

                // Add click handler
                card.addEventListener('click', function(e) {
                    if (type === 'folder') {
                        loadFolderContents(item.path);
                        clearSelection();
                    } else {
                        // Select file and update extract button
                        const extension = item.name.split('.').pop().toLowerCase();
                        selectItem(item.path, item.name, type, extension);

                        // Remove selection from all other cards
                        document.querySelectorAll('.file-card-selected').forEach(c => {
                            c.classList.remove('file-card-selected', 'border-primary-600', 'dark:border-primary-400', 'bg-primary-50', 'dark:bg-primary-900/20');
                        });

                        // Add selection to this card
                        card.classList.add('file-card-selected', 'border-primary-600', 'dark:border-primary-400', 'bg-primary-50', 'dark:bg-primary-900/20');

                        // Show file details
                        displaySelectedFile(item);
                    }
                });

                // Icon container
                const iconContainer = document.createElement('div');
                iconContainer.className = 'flex flex-col items-center';

                // Icon
                const icon = document.createElement('i');
                if (type === 'folder') {
                    icon.className = 'fas fa-folder text-5xl text-yellow-500 dark:text-yellow-400 mb-4 group-hover:scale-110 transition-transform duration-300';
                } else {
                    icon.className = getFileIcon(item.name).replace(/text-\w+/g, 'text-5xl') + ' mb-4 group-hover:scale-110 transition-transform duration-300';
                }
                iconContainer.appendChild(icon);

                // Name
                const name = document.createElement('div');
                name.className = 'text-center w-full';
                const nameSpan = document.createElement('span');
                nameSpan.className = 'text-sm font-medium text-gray-900 dark:text-white block truncate px-2';
                nameSpan.textContent = item.name;
                nameSpan.title = item.name; // Tooltip for full name
                name.appendChild(nameSpan);

                // Size (for files only)
                if (type === 'file' && item.size) {
                    const size = document.createElement('span');
                    size.className = 'text-xs text-gray-500 dark:text-gray-400 mt-1 block';
                    size.textContent = formatFileSize(item.size);
                    name.appendChild(size);
                }

                iconContainer.appendChild(name);
                card.appendChild(iconContainer);

                return card;
            }

            /**
             * Format file size to human readable format
             */
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            /**
             * Convert Unix permissions to octal format
             * Example: "drwxr-xr-x" -> "755"
             * Example: "-rw-r--r--" -> "644"
             */
            function convertPermissionsToOctal(permissions) {
                if (!permissions || permissions.length < 10) {
                    return '-';
                }

                // Remove the first character (file type: d, -, l, etc.)
                const perms = permissions.substring(1);

                // Calculate octal for each triplet (owner, group, others)
                let octal = '';
                for (let i = 0; i < 9; i += 3) {
                    let value = 0;
                    if (perms[i] === 'r') value += 4;
                    if (perms[i + 1] === 'w') value += 2;
                    if (perms[i + 2] === 'x' || perms[i + 2] === 's' || perms[i + 2] === 't') value += 1;
                    octal += value;
                }

                return octal;
            }

            /**
             * Display selected file in main content area
             */
            function displaySelectedFile(file) {
                // Get container elements
                const contentEmpty = document.getElementById('contentEmpty');
                const contentLoading = document.getElementById('contentLoading');
                const listView = document.getElementById('listView');
                const gridView = document.getElementById('gridView');

                // Hide all other views
                if (contentLoading) contentLoading.classList.add('hidden');
                listView.classList.add('hidden');
                gridView.classList.add('hidden');

                // Update path input with file path
                const pathInput = document.getElementById('pathInput');
                if (pathInput) {
                    pathInput.value = file.path;
                }

                // Get file icon without size classes and make it huge
                const iconClasses = getFileIcon(file.name).replace(/text-\w+/g, '').trim();

                // Create beautiful file display
                const fileDisplay = `
                    <div class="flex items-center justify-center h-full">
                        <div class="text-center px-8 max-w-2xl">
                            <!-- File Icon with glow effect -->
                            <div class="relative inline-block mb-6">
                                <div class="absolute inset-0 bg-gradient-to-br from-primary-400 to-primary-600 rounded-2xl blur-xl opacity-20 animate-pulse"></div>
                                <div class="relative bg-white dark:bg-gray-800 rounded-2xl p-12 shadow-xl border-2 border-gray-200 dark:border-gray-700">
                                    <i class="${iconClasses} text-7xl"></i>
                                </div>
                            </div>

                            <!-- File Name -->
                            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 break-all">${escapeHtml(file.name)}</h2>

                            <!-- File Details -->
                            <div class="flex items-center justify-center gap-6 text-gray-600 dark:text-gray-400 mb-8">
                                ${file.size ? `
                                    <div class="flex items-center gap-2">
                                        <i class="fas fa-file-lines text-base"></i>
                                        <span class="text-base font-medium">${formatFileSize(file.size)}</span>
                                    </div>
                                ` : ''}
                                <div class="flex items-center gap-2">
                                    <i class="fas fa-shield-halved text-base"></i>
                                    <span class="text-base font-mono">${convertPermissionsToOctal(file.permissions)}</span>
                                </div>
                                ${file.modified ? `
                                    <div class="flex items-center gap-2">
                                        <i class="fas fa-clock text-base"></i>
                                        <span class="text-base">${file.modified}</span>
                                    </div>
                                ` : ''}
                            </div>

                            <!-- Preview Button (Small & Elegant) -->
                            <div class="flex items-center justify-center">
                                <button onclick="previewFile('${escapeHtml(file.path)}')" class="inline-flex items-center gap-2 px-5 py-2.5 text-sm font-medium text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 bg-primary-50 dark:bg-primary-900/20 hover:bg-primary-100 dark:hover:bg-primary-900/30 rounded-lg border border-primary-200 dark:border-primary-800 transition-all duration-200">
                                    <i class="fas fa-eye text-sm"></i>
                                    <span>Preview File</span>
                                </button>
                            </div>

                            <!-- File Path -->
                            <div class="mt-8 p-4 bg-gray-100 dark:bg-gray-900 rounded-lg">
                                <p class="text-xs text-gray-500 dark:text-gray-400 font-mono break-all">
                                    <i class="fas fa-folder-tree mr-2"></i>${escapeHtml(file.path)}
                                </p>
                            </div>
                        </div>
                    </div>
                `;

                // Show the file display
                if (contentEmpty) {
                    contentEmpty.innerHTML = fileDisplay;
                    contentEmpty.classList.remove('hidden');
                }
            }

            /**
             * Render folder/file contents in list view (table format)
             */
            function renderListView(folders, files, currentPath) {
                const listViewBody = document.getElementById('listViewBody');

                // Clear existing content
                listViewBody.innerHTML = '';

                // Render folders first
                folders.forEach(folder => {
                    const row = createListRow(folder, 'folder', currentPath);
                    listViewBody.appendChild(row);
                });

                // Render files
                files.forEach(file => {
                    const row = createListRow(file, 'file', currentPath);
                    listViewBody.appendChild(row);
                });

                // If empty
                if (folders.length === 0 && files.length === 0) {
                    const emptyRow = document.createElement('tr');
                    emptyRow.innerHTML = `
                        <td colspan="5" class="px-4 py-12 text-center">
                            <i class="fas fa-folder-open text-gray-300 dark:text-gray-600 text-5xl mb-3 block"></i>
                            <p class="text-gray-500 dark:text-gray-400">This folder is empty</p>
                        </td>
                    `;
                    listViewBody.appendChild(emptyRow);
                }

                // Store current data for sorting
                window.currentListData = {
                    folders: folders,
                    files: files,
                    currentPath: currentPath,
                    sortColumn: 'name',
                    sortDirection: 'asc'
                };
            }

            /**
             * Create a list row for folder or file
             */
            function createListRow(item, type, currentPath) {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition';
                row.dataset.path = item.path;
                row.dataset.type = type;

                // Checkbox cell
                const checkboxCell = document.createElement('td');
                checkboxCell.className = 'px-4 py-3';
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'rounded border-gray-300 dark:border-gray-600';
                checkboxCell.appendChild(checkbox);
                row.appendChild(checkboxCell);

                // Checkbox change handler
                checkbox.addEventListener('change', function(e) {
                    e.stopPropagation();

                    if (checkbox.checked) {
                        // Uncheck all other checkboxes
                        document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                            if (cb !== checkbox) cb.checked = false;
                        });

                        // Select this file
                        const extension = item.name.split('.').pop().toLowerCase();
                        selectItem(item.path, item.name, type, extension);

                        // Remove selection from all other rows
                        document.querySelectorAll('.file-row-selected').forEach(r => {
                            r.classList.remove('file-row-selected', 'bg-primary-50', 'dark:bg-primary-900/20');
                        });

                        // Add selection to this row
                        row.classList.add('file-row-selected', 'bg-primary-50', 'dark:bg-primary-900/20');
                    } else {
                        // Deselect
                        clearSelection();
                        row.classList.remove('file-row-selected', 'bg-primary-50', 'dark:bg-primary-900/20');
                    }
                });

                // Row click handler
                row.addEventListener('click', function(e) {
                    // If clicking on the checkbox cell, let the checkbox handler deal with it
                    if (e.target === checkbox || e.target === checkboxCell) {
                        return;
                    }

                    if (type === 'folder') {
                        loadFolderContents(item.path);
                        clearSelection();
                    } else {
                        // Toggle checkbox when clicking row
                        checkbox.checked = !checkbox.checked;
                        checkbox.dispatchEvent(new Event('change'));
                    }
                });

                // Name cell
                const nameCell = document.createElement('td');
                nameCell.className = 'px-4 py-3';
                const nameDiv = document.createElement('div');
                nameDiv.className = 'flex items-center';

                const icon = document.createElement('i');
                if (type === 'folder') {
                    icon.className = 'fas fa-folder text-base text-yellow-500 dark:text-yellow-400 mr-3';
                } else {
                    icon.className = getFileIcon(item.name) + ' mr-3';
                }
                nameDiv.appendChild(icon);

                const nameSpan = document.createElement('span');
                nameSpan.className = 'text-gray-900 dark:text-white text-sm' + (type === 'folder' ? ' font-medium' : '');
                nameSpan.textContent = item.name;
                nameDiv.appendChild(nameSpan);

                nameCell.appendChild(nameDiv);
                row.appendChild(nameCell);

                // Size cell
                const sizeCell = document.createElement('td');
                sizeCell.className = 'px-4 py-3 text-gray-600 dark:text-gray-400 text-sm text-right';
                sizeCell.textContent = type === 'folder' ? '-' : (item.size ? formatFileSize(item.size) : '-');
                sizeCell.dataset.size = item.size || 0;
                row.appendChild(sizeCell);

                // Modified date cell
                const modifiedCell = document.createElement('td');
                modifiedCell.className = 'px-4 py-3 text-gray-600 dark:text-gray-400 text-sm';
                modifiedCell.textContent = item.modified || '-';
                modifiedCell.dataset.modified = item.modified || '';
                row.appendChild(modifiedCell);

                // Permissions cell (octal format)
                const permCell = document.createElement('td');
                permCell.className = 'px-4 py-3 text-gray-600 dark:text-gray-400 text-sm font-mono text-center';
                const octalPerm = convertPermissionsToOctal(item.permissions);
                permCell.textContent = octalPerm;
                permCell.dataset.permissions = octalPerm;
                row.appendChild(permCell);

                return row;
            }

            /**
             * Switch between grid and list view
             */
            function switchView(viewType) {
                const listView = document.getElementById('listView');
                const gridView = document.getElementById('gridView');
                const contentEmpty = document.getElementById('contentEmpty');
                const listBtn = document.getElementById('viewToggleList');
                const gridBtn = document.getElementById('viewToggleGrid');

                if (viewType === 'list') {
                    // Check if list view has content
                    const listBody = document.getElementById('listViewBody');
                    if (listBody && listBody.children.length > 0) {
                        // Show list view
                        listView.classList.remove('hidden');
                        gridView.classList.add('hidden');
                        if (contentEmpty) contentEmpty.classList.add('hidden');
                    }

                    // Update button states
                    listBtn.className = 'p-2 text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/30 rounded transition';
                    gridBtn.className = 'p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition';

                    // Save preference
                    localStorage.setItem('fileManagerView', 'list');
                } else {
                    // Check if grid view has content
                    const eliteGrid = document.getElementById('eliteGrid');
                    if (eliteGrid) {
                        // Show grid view
                        gridView.classList.remove('hidden');
                        listView.classList.add('hidden');
                        if (contentEmpty) contentEmpty.classList.add('hidden');
                    }

                    // Update button states
                    gridBtn.className = 'p-2 text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/30 rounded transition';
                    listBtn.className = 'p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition';

                    // Save preference
                    localStorage.setItem('fileManagerView', 'grid');
                }
            }

            /**
             * Initialize view from localStorage
             */
            function initializeView() {
                const savedView = localStorage.getItem('fileManagerView') || 'list';
                switchView(savedView);
            }

            /**
             * Setup view toggle buttons
             */
            const listToggleBtn = document.getElementById('viewToggleList');
            const gridToggleBtn = document.getElementById('viewToggleGrid');

            if (listToggleBtn) {
                listToggleBtn.addEventListener('click', function() {
                    switchView('list');
                });
            }

            if (gridToggleBtn) {
                gridToggleBtn.addEventListener('click', function() {
                    switchView('grid');
                });
            }

            // Initialize view on page load
            initializeView();

            /**
             * Escape HTML to prevent XSS
             */
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            /**
             * Keyboard shortcuts
             */
            document.addEventListener('keydown', function(e) {
                // F5 or Ctrl+R - Refresh current folder (global shortcut)
                if (e.key === 'F5' || ((e.ctrlKey || e.metaKey) && e.key === 'r')) {
                    e.preventDefault(); // Prevent browser refresh
                    refreshCurrentFolder();
                    return;
                }

                // Check if editor panel is open
                const editorPanel = document.getElementById('editorPanel');
                const isPanelOpen = !editorPanel.classList.contains('translate-x-full');

                if (!isPanelOpen) {
                    return; // Editor-specific shortcuts only work when editor is open
                }

                // Ctrl+S or Cmd+S - Save file
                if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                    e.preventDefault(); // Prevent browser's default save dialog

                    // Check if save button is visible (not in preview mode)
                    const saveBtn = document.getElementById('editorSaveBtn');
                    if (!saveBtn.classList.contains('hidden') && !saveBtn.disabled) {
                        saveFile();
                    }
                }

                // Esc - Close editor
                if (e.key === 'Escape') {
                    e.preventDefault();
                    closeEditor();
                }
            });
        });
    </script>

    <!-- Theme & Language Persistence (Best Practice: localStorage) -->
    <script>
        // Apply theme IMMEDIATELY (before page renders - prevents flash)
        (function() {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            if (savedTheme === 'dark') {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        })();

        // Theme Switcher
        function switchTheme(theme) {
            // Update DOM
            if (theme === 'dark') {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }

            // Save to localStorage (persists across sessions)
            localStorage.setItem('theme', theme);

            // Sync to server session (for server-side rendering)
            fetch('/api/theme', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'theme=' + theme
            }).then(response => response.json())
              .then(data => {
                  if (data.success) {
                      // Update button states
                      updateThemeButtons(theme);
                  }
              });
        }

        // Language Switcher
        function switchLanguage(language) {
            const cookieName = '<?= $language_cookie_name ?>';
            const cookieLifetime = <?= $language_cookie_lifetime ?>;

            // Save to cookie (works on both server and client)
            document.cookie = cookieName + '=' + language + '; path=/; max-age=' + cookieLifetime + '; SameSite=Strict';

            // Sync to server session
            fetch('/api/language', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'language=' + language
            }).then(response => response.json())
              .then(data => {
                  if (data.success) {
                      // Reload page to apply language changes
                      location.reload();
                  }
              });
        }

        // Update theme button states
        function updateThemeButtons(theme) {
            const lightBtn = document.querySelector('[onclick*="switchTheme(\'light\')"]');
            const darkBtn = document.querySelector('[onclick*="switchTheme(\'dark\')"]');

            const activeClasses = 'bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 font-medium';
            const inactiveClasses = 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700';

            if (theme === 'light') {
                lightBtn.className = 'flex-1 px-3 py-2 text-sm rounded-md transition ' + activeClasses;
                darkBtn.className = 'flex-1 px-3 py-2 text-sm rounded-md transition ' + inactiveClasses;
            } else {
                lightBtn.className = 'flex-1 px-3 py-2 text-sm rounded-md transition ' + inactiveClasses;
                darkBtn.className = 'flex-1 px-3 py-2 text-sm rounded-md transition ' + activeClasses;
            }
        }

        // Sync theme from localStorage to server on page load
        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            const serverTheme = '<?= $theme ?? 'dark' ?>';

            // Sync theme to server if different from PHP session
            if (savedTheme !== serverTheme) {
                fetch('/api/theme', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'theme=' + savedTheme
                });
            }

            // Update button states to match current theme
            updateThemeButtons(savedTheme);
        });
    </script>

    <!-- ============================================================
         FILE EDITOR / PREVIEW PANEL (Split View)
         Professional full-size editor based on CodeMirror best practices
         ============================================================ -->
    <div id="editorPanel" class="fixed inset-y-0 right-0 w-full md:w-11/12 lg:w-5/6 xl:w-4/5 bg-white dark:bg-gray-900 shadow-2xl transform translate-x-full transition-transform duration-300 ease-in-out z-50 flex flex-col border-l-2 border-gray-200 dark:border-gray-700">

        <!-- Panel Header -->
        <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
            <!-- File Info -->
            <div class="flex items-center gap-3 flex-1 min-w-0">
                <i id="editorFileIcon" class="fas fa-file text-xl text-gray-500 dark:text-gray-400"></i>
                <div class="flex-1 min-w-0">
                    <h3 id="editorFileName" class="text-lg font-semibold text-gray-900 dark:text-white truncate">
                        File Name
                    </h3>
                    <p id="editorFilePath" class="text-xs text-gray-500 dark:text-gray-400 truncate font-mono">
                        /path/to/file
                    </p>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex items-center gap-2 ml-4">
                <!-- Save Button (hidden for preview mode) -->
                <button id="editorSaveBtn" onclick="saveFile()" class="hidden px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white text-sm font-medium rounded-lg transition-colors duration-200 flex items-center gap-2">
                    <i class="fas fa-save"></i>
                    <span>Save</span>
                    <span class="text-xs opacity-75">(Ctrl+S)</span>
                </button>

                <!-- Close Button -->
                <button onclick="closeEditor()" class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
        </div>

        <!-- Panel Content -->
        <div class="flex-1 overflow-hidden relative">

            <!-- Loading State -->
            <div id="editorLoading" class="absolute inset-0 flex items-center justify-center bg-white dark:bg-gray-900">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin text-4xl text-primary-500 mb-3"></i>
                    <p class="text-gray-600 dark:text-gray-400">Loading file...</p>
                </div>
            </div>

            <!-- Error State -->
            <div id="editorError" class="hidden absolute inset-0 flex items-center justify-center bg-white dark:bg-gray-900 p-8">
                <div class="text-center max-w-md">
                    <i class="fas fa-exclamation-triangle text-5xl text-red-500 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Failed to Load File</h3>
                    <p id="editorErrorMessage" class="text-gray-600 dark:text-gray-400 mb-6">
                        An error occurred while loading the file.
                    </p>
                    <button onclick="closeEditor()" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition">
                        Close
                    </button>
                </div>
            </div>

            <!-- Code Editor Container -->
            <div id="editorContainer" class="hidden h-full">
                <!-- CodeMirror will be initialized here -->
            </div>

            <!-- Image Preview Container -->
            <div id="imagePreviewContainer" class="hidden h-full overflow-auto bg-gray-100 dark:bg-gray-800 flex items-center justify-center p-8">
                <div class="max-w-full">
                    <img id="imagePreview" src="" alt="Image Preview" class="max-w-full max-h-full rounded-lg shadow-xl border border-gray-300 dark:border-gray-600">
                </div>
            </div>

            <!-- File Too Large Warning -->
            <div id="editorFileTooLarge" class="hidden absolute inset-0 flex items-center justify-center bg-white dark:bg-gray-900 p-8">
                <div class="text-center max-w-md">
                    <i class="fas fa-file-circle-exclamation text-5xl text-orange-500 mb-4"></i>
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">File Too Large</h3>
                    <p class="text-gray-600 dark:text-gray-400 mb-2">
                        This file exceeds the maximum size limit for editing.
                    </p>
                    <p id="editorFileSizeInfo" class="text-sm text-gray-500 dark:text-gray-500 mb-6 font-mono">
                        File size: 0 MB / Max: 5 MB
                    </p>
                    <button onclick="closeEditor()" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition">
                        Close
                    </button>
                </div>
            </div>

        </div>

        <!-- Panel Footer (Status Bar) -->
        <div id="editorFooter" class="hidden px-6 py-2 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 flex items-center justify-between text-xs">
            <div class="flex items-center gap-4 text-gray-600 dark:text-gray-400">
                <span id="editorFileSize">Size: 0 B</span>
                <span id="editorFileExtension">Type: txt</span>
                <span id="editorModifiedStatus" class="hidden text-orange-500 dark:text-orange-400 font-medium">
                    <i class="fas fa-circle text-xs"></i> Modified
                </span>
            </div>
            <div class="text-gray-500 dark:text-gray-500">
                <span>Press <kbd class="px-1.5 py-0.5 bg-gray-200 dark:bg-gray-700 rounded text-xs">Esc</kbd> to close</span>
            </div>
        </div>
    </div>

    <!-- Editor Panel Overlay (Click to close) -->
    <div id="editorOverlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity duration-300" onclick="closeEditor()"></div>

</body>
</html>
